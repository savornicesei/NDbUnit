/*
 * NDbUnit2
 * https://github.com/savornicesei/NDbUnit2
 * This source code is released under the Apache 2.0 License; see the accompanying license file.
 *
 */
using System;
using System.Collections.Specialized;
using System.Data;
using System.IO;

namespace NDbUnit.Core
{
    /// <summary>
    /// Represents a unit test database initialization operation.
    /// </summary>
    public interface INDbUnitTest : IDisposable
    {
        /// <summary>
        /// Occurs after DbOperation has completed.
        /// </summary>
        event PostOperationEvent PostOperation;

        /// <summary>
        /// Occurs before DbOperation begins.
        /// </summary>
        event PreOperationEvent PreOperation;

        /// <summary>
        /// Performs a database operation.
        /// </summary>
        /// <param name="dbOperationFlag">The database operation to perform.</param>
        /// <exception cref="NDbUnitException" />
        void PerformDbOperation(DbOperationFlag dbOperationFlag);

        /// <summary>
        /// Read in an XML schema file whose schema represents a set of
        /// tables in a database.  This schema file is used to build the
        /// database modification commands that are used to update the 
        /// database.  This is the first function that must be called 
        /// prior to any other functions being called on the interface.  
        /// Otherwise, an exception will be thrown.
        /// </summary>
        /// <remarks>The XML schema file can be generated by dragging and 
        /// dropping tables from Visual Studio's server explorer into a 
        /// DataSet.xsd file.</remarks>
        /// <param name="xmlSchemaFile">The schema file.</param>
        /// <exception cref="ArgumentException" />
        void ReadXmlSchema(string xmlSchemaFile);

        /// <summary>
        /// Read in an XML schema whose schema represents a set of
        /// tables in a database.  This schema is used to build the
        /// database modification commands that are used to update the 
        /// database.  This is the first function that must be called 
        /// prior to any other functions being called on the interface.  
        /// Otherwise, an exception will be thrown.
        /// </summary>
        /// <param name="xmlSchema">The schema stream.</param>
        /// <exception cref="ArgumentException" />
        void ReadXmlSchema(Stream xmlSchema);

        /// <summary>
        /// Read in an XML file whose data should be conform to the schema 
        /// of the file specified in the call to <see cref="ReadXmlSchema" />.  
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xmlFile">The XML file.</param>
        /// <exception cref="ArgumentException" />
        void ReadXml(string xmlFile);

        /// <summary>
        /// Read in an XML stream whose data should be conform to the schema 
        /// specified in the call to <see cref="ReadXmlSchema" />.  
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xml">The XML stream.</param>
        /// <exception cref="ArgumentException" />
        void ReadXml(Stream xml);

        /// <summary>
        /// Read in an XML file whose data should be conform to the schema 
        /// of the file specified in the call to <see cref="ReadXmlSchema" />.  
        /// The data is appended to any existing data in the dataset.
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xmlFile">The XML file.</param>
        /// <exception cref="ArgumentException" />
        void AppendXml(string xmlFile);

        /// <summary>
        /// Read in an XML stream whose data should be conform to the schema 
        /// specified in the call to <see cref="ReadXmlSchema" />.
        /// The data is appended to any existing data in the dataset.
        /// If the data does not conform to the schema, it will be ignored.  
        /// This data is used to update the database.
        /// </summary>
        /// <param name="xml">The XML stream.</param>
        /// <exception cref="ArgumentException" />
        void AppendXml(Stream xml);

        /// <summary>
        /// Gets a <see cref="DataSet" /> object that contains both the 
        /// internal schema information and data.
        /// </summary>
        /// <returns><see cref="DataSet" /></returns>
        /// <exception cref="NDbUnitException" />
        DataSet CopyDataSet();

        /// <summary>
        /// Gets a <see cref="DataSet" /> object that contains only the 
        /// internal schema information.
        /// </summary>
        /// <returns><see cref="DataSet" /></returns>
        /// <exception cref="NDbUnitException" />
        DataSet CopySchema();

        /// <summary>
        /// Gets a data set from the database tables.  Includes all
        /// table names in the XML schema.
        /// </summary>
        /// <exception cref="NDbUnitException" />
        DataSet GetDataSetFromDb();

        /// <summary>
        /// Gets a data set from the database tables.
        /// </summary>
        /// <param name="tableNames">The list of table names in the XML 
        /// schema to export. If null, then all table names in the XML 
        /// schema will be exported.</param>
        /// <exception cref="NDbUnitException" />
        DataSet GetDataSetFromDb(StringCollection tableNames);


        /// <summary>
        /// Gets or sets the command time out.
        /// </summary>
        /// <value>The command time out.</value>
        int CommandTimeOut { get; set; }


        /// <summary>
        /// Executes the scripts.
        /// </summary>
        void ExecuteScripts();


        /// <summary>
        /// Gets the Script Manager.
        /// </summary>
        /// <value>The Script Manager.</value>
        ScriptManager Scripts { get; }

    }
}